[
  {
    "genre": "Go-Concurrent",
    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfmt.Println(\"worker\", id, \"started  job\", j)\n\t\ttime.Sleep(time.Second)\n\t\tfmt.Println(\"worker\", id, \"finished job\", j)\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 5; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 5; a++ {\n\t\t<-results\n\t}\n}",
    "keywords": ["goroutine", "chan", "go", "select", "sync", "mutex", "waitgroup", "concurrent", "parallel"]
  },
  {
    "genre": "Go-Systems",
    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tf, err := os.Create(\"dat1\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer f.Close()\n\td1 := []byte(\"hello\\ngo\\n\")\n\tn2, err := f.Write(d1)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"wrote %d bytes\\n\", n2)\n}",
    "keywords": ["os", "package main", "import", "fmt", "io", "ioutil", "file", "defer", "panic", "syscall", "buffer"]
  },
  {
    "genre": "JS-Async",
    "code": "async function fetchData() {\n  try {\n    const response = await fetch('https://api.github.com/users/github');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Could not fetch data:', error);\n  }\n}\n\nfetchData();",
    "keywords": ["async", "await", "fetch", "promise", "then", "catch", "try", "function", "const", "let"]
  },
  {
    "genre": "JS-DOM",
    "code": "document.addEventListener('DOMContentLoaded', () => {\n  const button = document.getElementById('myButton');\n  const heading = document.querySelector('h1');\n\n  button.addEventListener('click', () => {\n    heading.textContent = 'You clicked the button!';\n    heading.style.color = 'blue';\n  });\n});",
    "keywords": ["document", "addEventListener", "getElementById", "querySelector", "const", "let", "click", "DOMContentLoaded", "style"]
  },
  {
    "genre": "JS-Functional",
    "code": "const numbers = [1, 2, 3, 4, 5];\n\nconst isEven = x => x % 2 === 0;\nconst square = x => x * x;\nconst sum = (a, b) => a + b;\n\nconst sumOfSquaredEvens = numbers\n  .filter(isEven)\n  .map(square)\n  .reduce(sum, 0);\n\nconsole.log(sumOfSquaredEvens);",
    "keywords": ["map", "filter", "reduce", "const", "let", "=>", "array", "functional", "forEach"]
  },
  {
    "genre": "Algorithmic-Logic",
    "code": "function bubbleSort(arr) {\n    let n = arr.length;\n    for (let i = 0; i < n-1; i++) {\n        for (let j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                let temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}",
    "keywords": ["for", "if", "else", "while", "return", "function", "let", "var", "sort", "array", "length", "loop"]
  }
]